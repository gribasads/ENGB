/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package telas;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;

/**
 *
 * @author ArthurCyrilloGeiger
 */
public class Visualizar extends javax.swing.JFrame {

    int idtransction;
    

    private TelaInicial telaInicial;
    
    /**
     * Creates new form Visualizar
     */
    public Visualizar() {
        initComponents();
    }
    
    
    
        

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tituloValor = new javax.swing.JLabel();
        descricao = new javax.swing.JLabel();
        data = new javax.swing.JLabel();
        txtData = new javax.swing.JTextField();
        valor = new javax.swing.JLabel();
        txtValor = new javax.swing.JTextField();
        deletarValor = new javax.swing.JButton();
        voltarTelaInicial = new javax.swing.JLabel();
        txtDescricao = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tituloValor.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        tituloValor.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                tituloValorAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        descricao.setText("Descrição:");

        data.setText("Data: ");

        txtData.setEditable(false);
        txtData.setFocusable(false);
        txtData.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                txtDataAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        valor.setText("Valor:");

        txtValor.setEditable(false);
        txtValor.setFocusable(false);
        txtValor.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                txtValorAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        deletarValor.setText("Deletar Valor");
        deletarValor.setToolTipText("");
        deletarValor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletarValorActionPerformed(evt);
            }
        });

        voltarTelaInicial.setText("< Voltar para a tela inicial");
        voltarTelaInicial.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                voltarTelaInicialMouseClicked(evt);
            }
        });

        txtDescricao.setEditable(false);
        txtDescricao.setFocusable(false);
        txtDescricao.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                txtDescricaoAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tituloValor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(voltarTelaInicial))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(descricao)
                            .addComponent(data)
                            .addComponent(valor))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtDescricao, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 66, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(txtData, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtValor, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(deletarValor)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tituloValor)
                    .addComponent(voltarTelaInicial))
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(descricao)
                        .addGap(138, 138, 138))
                    .addComponent(txtDescricao, javax.swing.GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(data)
                    .addComponent(txtData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(valor)
                    .addComponent(txtValor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deletarValor))
                .addContainerGap(10, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void deletarValorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletarValorActionPerformed
        try {     
            float saldoAtual = 0;
            float valor = 0;
            // inicia conexão e busca o saldo
            Connection con = null;
            Class.forName("org.postgresql.Driver");
            con = DriverManager.getConnection("jdbc:postgresql://babar.db.elephantsql.com:5432/byilvclc", "byilvclc", "yXK3NfRASYu3lbByS86UJp5rB7ClzphY");
            System.out.println("CONECTADO!");
            Statement stm = con.createStatement();
            String sql = "SELECT balance FROM public.accounts a WHERE iduser='1'";
            ResultSet rs = stm.executeQuery(sql);
            
            // armazena o saldo
            while (rs.next()){                
                saldoAtual = rs.getFloat("balance");
                System.out.println("SALDO ATUAL:"+saldoAtual);
            }
            
            // busca o valor
            String sql2 = "SELECT value FROM public.wallet a WHERE idtransaction='"+idtransction+"'";
            ResultSet rs2 = stm.executeQuery(sql2);
            
            while (rs2.next()){                
                valor = rs2.getFloat("value");
            }
            
            // atualizo o saldo
            if (valor > 0){
                float novoSaldo = saldoAtual - valor;
                String sql3 = "UPDATE accounts SET balance = '"+novoSaldo+"' WHERE iduser='1'";
                stm.execute(sql3); 
            }
            if (valor < 0)
            {
                float novoSaldo = saldoAtual + valor;
                String sql3 = "UPDATE accounts SET balance = '"+novoSaldo+"' WHERE iduser='1'";
                stm.execute(sql3);
            }
                        
            // excluir os dados do valor no banco          
            String sql4 = "DELETE FROM public.wallet WHERE idtransaction='"+idtransction+"' and iduser='1'";
            stm.execute(sql4);
            
            // fecha conexão
            con.close();          
            
            // voltar para a tela inicial
            TelaInicial inicio = new TelaInicial();
            this.dispose();
            inicio.setVisible(true);
            
            }catch (Exception e) {
            e.printStackTrace();
            }
    }//GEN-LAST:event_deletarValorActionPerformed

    private void voltarTelaInicialMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_voltarTelaInicialMouseClicked
        // voltar para a tela inicial
        TelaInicial inicio = new TelaInicial();
        this.dispose();
        inicio.setVisible(true);
    }//GEN-LAST:event_voltarTelaInicialMouseClicked

    private void txtDataAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_txtDataAncestorAdded
        try {                        
            // conectar e buscar a data da transação            
            Connection con = null;
            Class.forName("org.postgresql.Driver");
            con = DriverManager.getConnection("jdbc:postgresql://babar.db.elephantsql.com:5432/byilvclc", "byilvclc", "yXK3NfRASYu3lbByS86UJp5rB7ClzphY");
            System.out.println("CONECTADO!");            
            Statement stm = con.createStatement();
            String sql = "select date from public.wallet w where idtransaction='"+idtransction+"' and iduser='1'";
            ResultSet rs = stm.executeQuery(sql);
            
            // exibir a data da transação 
            while (rs.next()){                
                String data = rs.getString("date");
                txtData.setText(data);
                con.close();
            }
            }catch (Exception e) {
            e.printStackTrace();
            }
    }//GEN-LAST:event_txtDataAncestorAdded

    private void txtValorAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_txtValorAncestorAdded
       try {                        
            // conectar e buscar o valor da transação  
            Connection con = null;
            Class.forName("org.postgresql.Driver");
            con = DriverManager.getConnection("jdbc:postgresql://babar.db.elephantsql.com:5432/byilvclc", "byilvclc", "yXK3NfRASYu3lbByS86UJp5rB7ClzphY");
            System.out.println("CONECTADO!");            
            Statement stm = con.createStatement();
            String sql = "select value from public.wallet w where idtransaction='"+idtransction+"' and iduser='1'";
            ResultSet rs = stm.executeQuery(sql);
            
            // exibir o valor da transação 
            while (rs.next()){                
                Float valor = rs.getFloat("value");
                txtValor.setText(Float.toString(valor));
                con.close();
            }
            }catch (Exception e) {
            e.printStackTrace();
            }
    }//GEN-LAST:event_txtValorAncestorAdded

    private void tituloValorAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_tituloValorAncestorAdded
        tituloValor.setText("Valor "+idtransction);
    }//GEN-LAST:event_tituloValorAncestorAdded

    private void txtDescricaoAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_txtDescricaoAncestorAdded
       try {                        
            // conectar e buscar a descrição da transação
            Connection con = null;
            Class.forName("org.postgresql.Driver");
            con = DriverManager.getConnection("jdbc:postgresql://babar.db.elephantsql.com:5432/byilvclc", "byilvclc", "yXK3NfRASYu3lbByS86UJp5rB7ClzphY");
            System.out.println("CONECTADO!");            
            Statement stm = con.createStatement();
            String sql = "select description from public.wallet w where idtransaction='"+idtransction+"' and iduser='1'";
            ResultSet rs = stm.executeQuery(sql);
            
            // exibir a descrição da transação                  
            while (rs.next()){                
                String descricao = rs.getString("description");
                txtDescricao.setText(descricao);
                con.close();
            }
            }catch (Exception e) {
            e.printStackTrace();
            }
    }//GEN-LAST:event_txtDescricaoAncestorAdded

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Visualizar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Visualizar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Visualizar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Visualizar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Visualizar().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel data;
    private javax.swing.JButton deletarValor;
    private javax.swing.JLabel descricao;
    private javax.swing.JLabel tituloValor;
    private javax.swing.JTextField txtData;
    private javax.swing.JTextField txtDescricao;
    private javax.swing.JTextField txtValor;
    private javax.swing.JLabel valor;
    private javax.swing.JLabel voltarTelaInicial;
    // End of variables declaration//GEN-END:variables
    
    public int getIdtransction() {
        return idtransction;
    }
    public void setIdtransction(int idtransction) {
        this.idtransction = idtransction;
    }
    
    public void receberId(int id){
        setIdtransction(id);
    }

}
